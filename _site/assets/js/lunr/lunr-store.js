var store = [{
        "title": "LibrePhotos Install",
        "excerpt":"      LibrePhotos    Mockup designed by rawpixel.com / Freepik  Screenshots        Live demo  Live demo available here. User is demo, password is demo1234.   Communication  You can join us via IRC or Discord. There is a bridge between the IRC and Discord:                  Discord       Freenode IRC                       #chit-chat       #Libre-Photos                 #community-support       #Libre-Photos-Support                 #dev       #Libre-Photos-dev           What is it?      LibrePhotos is a fork of Ownphotos   Self hosted Google Photos clone, with a slight focus on cool graphs   Django backend &amp; React frontend.   Contributions     Librephotos is in development. Contributions are welcome!   Join our discord server or open a pull request to start contributing   We are looking for developers who want to port LibrePhotos to ARM   Currently the project is in very early stages, some bugs may exist. If you find any please log an issue   Features   - Currently implemented:      Label some faces manually, and train a face classifier to label the rest.   View photos by people in them.   Automatically generate “event” albums like “Thursday in Berlin”   See photos on the map   Backend caching   View photos grouped by date   “Optimized” frontend   Detect objects in photos, and make them searchable by objects   Search photos by the location   Authentication (using JWT)   Create custom albums   Docker ready   - Upcoming      Short term:            Share photos/albums       Stability           Longer term, i.e. haven’t thought much about them            Basic photo editing, like rotation       Tag undetected face       Add cool graphs           What does it use?      Face detection: face_recognition   Face classification/clusterization: scikit-learn   Object detection: densecap, places365   Reverse geocoding: Mapbox: You need to have an API key. First 50,000 geocode lookups are free every month.   How do I run it?   Compatibility  You need a x86 processor and it is recommended to have 8GBs of RAM. It does not work on ARM processors. That also means that it won’t run on a raspberry pi.   Size  You will need at least 10 GB of HDD Space for the docker images. It needs that space because of the machine learning models. Librephotos will also create a database and thumbnails which will need additional space.   Docker   LibrePhotos comes with separate backend and frontend servers. The backend serves the restful API, and the frontend serves, well, the frontend. They are connected via a proxy. The easiest way to do it is using Docker.   Docker-compose method (Recommended)   wget https://raw.githubusercontent.com/LibrePhotos/librephotos/dev/docker-compose.yml wget https://raw.githubusercontent.com/LibrePhotos/librephotos/dev/librephotos.env cp librephotos.env .env   Do not forget to create the directories you specified in the .env file if they do not exist.   Open .env in your favorite text editor and make the required changes.   docker-compose up -d   You should have librephotos accessible after a few minutes of bootup on: localhost:3000 unless you changed it in the .env file. User is admin, password is admin unless you changed it in the .env file. It is recommended you change the admin username and password if Libre Photos is going to be publicly accessible via the .env file.   First steps after setting up   You need to log in as the admin user, and set up the directory for the users. To do this, click the top right button, and go to “Admin Area”. On this page, it will show a list of users, and manually set the “Scan Directory” for the desired user. Only an admin can do this. And then you can go to Dashboard - Library and click the Green “Scan photos (file system)” button. If you have a Nextcloud instance, you can also input this in the Dashboard-Library page. Once logged in (the little circle next to “Nextcloud Scan Directory will be green), you can choose a top level directory in your logged in Nextcloud account. Once this works, you can click the blue “Scan photos (Nextcloud)”. The backend system will copy the contents of the Nextcloud directory you specified.   The basic idea is this:      For scanning photos that reside in the local file system            Only the admin user can change the “scan directory” of the users, including the admin itself.       Normal users cannot change his/her own “scan directory”       Only the admin can find the page to control this under the “user icon (top right) - admin area”           For scanning photos that reside in external Nextcloud instances            Any user can change his/her own Nextcloud endpoint, and choose a top level directory in the Nextcloud account.          ","categories": ["1"],
        "tags": [],
        "url": "http://localhost:4000/1/standard_install/",
        "teaser": null
      },{
        "title": "LibrePhotos Alt Install",
        "excerpt":"Overview   This page will hold alternative install methods. Have you installed Libre Photos in a different way? If so please let us know so that we can add how you did it here.  ","categories": ["1"],
        "tags": [],
        "url": "http://localhost:4000/1/alt_install-copy/",
        "teaser": null
      },{
        "title": "LibrePhotos Data Collection",
        "excerpt":"Overview   It is real simple. LibrePhotos does not phone home. If Libre Photos ever decides to collect any information it will be opt in. You will have to explicitly say yes it is ok.   You may be asking why would Libre Photos ever need to send back information. To put it simply it would be for error reporting, allowing the development team to id and fix issues more swiftly.  Once again this would be opt in and we would tell you exactly what is being collected.  ","categories": ["2"],
        "tags": [],
        "url": "http://localhost:4000/2/data_collection/",
        "teaser": null
      },{
        "title": "LibrePhotos Docs: How-To",
        "excerpt":"Overview   This documentation is a one-stop-shop for all resources for LibrePhotos - from installation (including one-off cases), to how the code actually works.   If you’re looking to help us develop our documentation, it’s as simple as submitting a pull request to the librephotos.docs repository.   Now below is just some quick information on our standardized category names and file naming convention. Please see the [wiki](https://github.com/LibrePhotos/librephotos.docs/wiki “”) for more tips and ticks for formatting the document pages.   Categories explained   Categories how we organize all the articles. Categories have to be declared in the file name, and in the file itself.                  Category Name       Category Number                       Installation       1                 Data Collection       2                 Contribution       3                 Dev Resources: Frontend       4                 Dev Resources: Backend       5                 Dev Resources: Nginx       6                 Dev Resources: Redress       7                 Dev Resources: Docker       8           Let’s take a moment to look at each section of the file name.   File Names   File names are very easy to get right once you understand how they work. The name of the file can be broken up into 4 sections; an example valid file name would be 0000-03-01-documentation.md .   First group of numbers   This should always be 0000.   Second group of numbers   This is the category number from above, and should always be two digits. In the case of our example, this is 03, meaning the article is from the Contribution category.   Third group of numbers   Article number. This sets the order that the articles should appear in, starting at 01, and should always be two digits. In the case of our example, this is 01, meaning the article is the first in its category.   Text section   This one is easy: it is just a short descriptive name of the article. Must end in .md.   Front Matter   At the start of each page, there needs to be header info, so that the documents can be built correctly. The minimum requirement is:   --- title: \"Article Title\" excerpt: \"A short description of what the article is about.\" last_modified_at: 2020-01-18 category: 1 ---   Ensure you use a category ID from the table above.   Local preview  You can see what the documents will look like before you submit your pull request by setting up a local environment to do so. It is pretty easy really.      Linux            Coming soon.           Windows            Install Ruby 2.7 with build kit, you can get it from here Note: Do not install 3.x it will not work.       Open a command prompt and run markdown gem install jekyll bundler       In the same command prompt go to where you have the librephotos.doc git repo cloned and run markdown bundle install       It is not time to run the webserver so you can see your edits. In the same command prompt run markdown bundle exec jekyll serve. You can now see your local edits live at 127.0.0.1:4000          ","categories": ["3"],
        "tags": [],
        "url": "http://localhost:4000/3/documentation/",
        "teaser": null
      },{
        "title": "LibrePhotos Development Frontend",
        "excerpt":"Overview   The Front end, what everyone sees.  ","categories": ["4"],
        "tags": [],
        "url": "http://localhost:4000/4/dev_frontdend/",
        "teaser": null
      },{
        "title": "LibrePhotos Development Backend ",
        "excerpt":"Overview   The Backend where the magic happens.  ","categories": ["5"],
        "tags": [],
        "url": "http://localhost:4000/5/dev_backend/",
        "teaser": null
      },{
        "title": "LibrePhotos Data Collection",
        "excerpt":"Overview   Libre Photos Docker information.  ","categories": ["8"],
        "tags": [],
        "url": "http://localhost:4000/8/dev_docker/",
        "teaser": null
      }]
